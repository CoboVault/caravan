import React, { useState } from "react";
import PropTypes from "prop-types";
import { PENDING } from "unchained-wallets";

import { Button, FormHelperText, Grid } from "@material-ui/core";

import CoboVaultRawReader from "./CoboVaultRawReader";

const CoboVaultReader = (props) => {
  const [status, setStatus] = useState(PENDING);
  const [error, setError] = useState("");
  const {
    interaction,
    qrStartText,
    fileStartText,
    shouldShowFileReader,
    fileType,
    onClear,
    onSuccess,
  } = props;

  const handleError = (err) => {
    setStatus("error");
    setError(err.message);
    if (onClear) {
      onClear();
    }
  };

  const handleSuccess = (result) => {
    onSuccess(result);
    setStatus("success");
  };

  const handleStop = () => {
    setStatus(PENDING);
    setError("");
    if (onClear) {
      onClear();
    }
  };

  if (status === PENDING) {
    const instructionMessage1 = interaction.messageFor({
      state: status,
      code: "cobo.instruction_1",
    });
    const instructionMessage2 = interaction.messageFor({
      state: status,
      code: "cobo.instruction_2",
    });
    return (
      <div>
        <p>{instructionMessage1.text}</p>
        <p>{instructionMessage2.text}</p>
        <p>
          When you are ready, scan the QR code produced by Cobo Vault or upload
          the file generated by Cobo Vault:
        </p>
        <Grid container spacing={2}>
          <CoboVaultRawReader
            shouldShowFileReader={shouldShowFileReader}
            fileStartText={fileStartText}
            qrStartText={qrStartText}
            interaction={interaction}
            handleError={handleError}
            handleSuccess={handleSuccess}
            handleStop={handleStop}
            fileType={fileType}
          />
        </Grid>
      </div>
    );
  }

  if (status === "error" || status === "success") {
    return (
      <div>
        <FormHelperText error>{error}</FormHelperText>
        <Button
          variant="contained"
          color="secondary"
          size="small"
          onClick={handleStop}
        >
          Reset
        </Button>
      </div>
    );
  }

  return null;
};

CoboVaultReader.propTypes = {
  onSuccess: PropTypes.func.isRequired,
  onClear: PropTypes.func.isRequired,
  qrStartText: PropTypes.string,
  shouldShowFileReader: PropTypes.bool.isRequired,
  fileStartText: PropTypes.string,
  interaction: PropTypes.shape({
    messageFor: PropTypes.func,
    parse: PropTypes.func,
  }).isRequired,
  fileType: PropTypes.string,
};

CoboVaultReader.defaultProps = {
  qrStartText: "",
  fileStartText: "",
  fileType: "json",
};

export default CoboVaultReader;
